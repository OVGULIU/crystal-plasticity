# _*_ coding: utf-8 _*_
import numpy as np
def props_to_file(name_of_grain, vector_of_gcs):
    grain_props_template = '''*Material, name={0}
    *Depvar
        125,
    *User Material, constants=160, unsymm
    168400.,121400., 75400.,     0.,     0.,     0.,     0.,     0.
         0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.
         0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.
         1.,     0.,     0.,     0.,     0.,     0.,     0.,     0.
         1.,     1.,     1.,     1.,     1.,     0.,     0.,     0.
         0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.
         0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.
        -1.,     0.,     1.,    {1:.4f},    {2:.4f},    {3:.4f},     0.,     0.
         0.,     1.,     0.,    {4:.4f},    {5:.4f},    {6:.4f},     0.,     0.
        10.,  0.001,     0.,     0.,     0.,     0.,     0.,     0.
         0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.
         0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.
      541.5,  109.5,   60.8,     0.,     0.,     0.,     0.,     0.
         1.,     1.,     0.,     0.,     0.,     0.,     0.,     0.
         0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.
         0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.
         0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.
         0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.
        0.5,     1.,     0.,     0.,     0.,     0.,     0.,     0.
         1.,    10.,  1e-05,     0.,     0.,     0.,     0.,     0.''' + '\n'

    grain_props = grain_props_template.format(name_of_grain, *vector_of_gcs)
    with open("grain_props.txt", 'a') as f:
        f.write(grain_props)
        
def ori_to_file(ori_path):
    # parse rotation matrix from grain ori file
    # and write crystal plastictiy props to a file
    ori = np.loadtxt(ori_path)
    num_grains = int(ori.shape[0] / 3)
    xyz_C = np.array([[-1., 0., 1.],[0., 1., 0.]]) #2 vectors in crystal coordinate

    for i in range(num_grains):
        g = ori[i*3: (i+1)*3] # rotation matrix is orthogonal matrix
        xyz_S = np.dot(g, xyz_C.T)
        temp = xyz_S.T.flatten()
        vector_of_gcs = list(temp)
        name_of_grain = 'Poly{}'.format(i+1)
        props_to_file(name_of_grain, vector_of_gcs)

def section_tofile(ori_path):
    ori = np.loadtxt(ori_path)
    num_grains = int(ori.shape[0] / 3)
    template = r'*Solid Section, elset={0}, material={0}' + '\n' + ',' + '\n'
    
    for i in range(num_grains):
        name_of_grain = 'Poly{}'.format(i+1)
        with open("section.txt", 'a') as f:
            f.write(template.format(name_of_grain))

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description='ori file generated by neper')
    parser.add_argument('--file',type=str)
    args = parser.parse_args()
    ori_path = args.file
    ori_to_file(ori_path)
    section_tofile(ori_path)
